// encoding existential types in universal types
let natcounter=(λY.λf:(∀X.{new:X,get:(X->Nat),inc:(X->X)}->Y). (f [Nat]) {new=0, get=(λn:Nat.n), inc=(λn:Nat.succ n)}) in
let rcdcounter=(λY.λf:(∀X.{new:X,get:(X->Nat),inc:(X->X)}->Y). (f [{Nat}]) {new={0}, get=(λn:{Nat}. n.1), inc=(λn:{Nat}.{succ (n.1)})}) in
let counter=rcdcounter in
(counter [Nat]) (λX.λx:{new:X,get:(X->Nat),inc:(X->X)}.x.get (x.inc x.new))