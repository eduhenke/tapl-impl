type F={a:Nat};
// type G is a subtype of F
type G={a:Nat,b:Bool};
// type H is a subtype of G and F
type H={a:Nat,b:Bool,c:Nat};
// type T is not a subtype of any of the above
type T={d:Nat};

let f=(
  λX. λY<:X. λZ<:Y.
  λf:X->Nat. λz:Z. f z) in

(((f [F]) [G]) [H])
  (λr:F . succ r.a)
  {a=3, b=true, c=0}